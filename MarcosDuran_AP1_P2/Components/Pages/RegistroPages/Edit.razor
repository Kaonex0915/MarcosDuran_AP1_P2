@page "/Edit/{ComboId:int}"
@inject ToastService notifications
@inject RegistroComboServices registroComboService
@rendermode InteractiveServer
<Toasts class="p-3" AutoHide="true" Delay="4000" Placement="ToastsPlacement.TopRight" />

<EditForm Model="combo" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <div class="card shadow-lg border-0 rounded" style="background-color: #f8f9fa;">
        <div class="card-header bg-primary text-white" style="text-align: center;">
            <h3> <i class="fas fa-clipboard-list"></i> Editar Combo</h3>
        </div>

        <div class="card-body">

            <div class="row">
                <div class="col-md-6 mb-3">
                    <label for="ComboId" class="form-label">ComboId:</label>
                    <div class="input-group">
                        <div class=" sizeid">
                            <InputNumber @bind-Value="combo.ComboId" class="form-control" style="font-size: 0.8em;" aria-describedby="BotonBuscar" />
                        </div>
                    </div>
                </div>
            </div>


            <div class="mb-3">
                <label for="Fecha" class="form-label">Fecha:</label>
                <InputDate @bind-Value="combo.Fecha" class="form-control" />
                <ValidationMessage For="@(() => combo.Fecha)" />
            </div>



            <div class="mb-3">
                <label for="Descripcion" class="form-label">Descripcion:</label>
                <InputText @bind-Value="combo.Descripcion" class="form-control" />
                <ValidationMessage For="@(() => combo.Descripcion)" />
            </div>


            <div class="mb-3">
                <label for="Monto" class="form-label">Monto:</label>
                <InputNumber @bind-Value="combo.Precio" class="form-control" />
                <ValidationMessage For="@(() => combo.Precio)" />
            </div>

            <fieldset class="border-success border border-1">
                <h3>Articulos</h3>
                <div>
                    <div class="row">
                        <div class="col-3">
                            <label>Articulo</label>
                            <div class="input-group mb-3">
                                <InputSelect class="form-select" @bind-Value="articuloSeleccionado">
                                    <option value="0" disabled selected>Seleccione un articulo</option>
                                    @foreach (var articulo in Lista_Articulos)
                                    {
                                        <option value="@articulo.ArticuloId">@articulo.Descripcion</option>
                                    }
                                </InputSelect>
                            </div>
                        </div>

                        <div class="col-3">
                            <label>Cantidad</label>
                            <div class="input-group mb-3">
                                <InputNumber @bind-Value="combosDetalle.Cantidad" class="form-control"></InputNumber>
                            </div>
                        </div>
                        <div class="col-3">
                            <label>Precio</label>
                            <div class="input-group mb-3">
                                <InputNumber @bind-Value="combosDetalle.Costo" class="form-control"></InputNumber>
                            </div>
                        </div>

                        <div class="col">
                            <button type="button" @onclick="AgregarDetalle" class="btn btn-outline-primary"><i class="bi bi-plus">Agregar</i></button>
                        </div>


                    </div>

                    <br>
                    <table class="table table-bordered table-light m-1">
                        <thead class="thead">
                            <tr class="table">
                                <th>Articulo Id</th>
                                <th>Cantidad</th>
                                <th>Precio</th>
                            </tr>
                        </thead>

                        <tbody>
                            @foreach (var trabajoDetalles in Lista_CombosDetalle)
                            {
                                <tr>
                                    <td>@trabajoDetalles.ArticuloId</td>
                                    <td>@trabajoDetalles.Cantidad</td>
                                    <td>@trabajoDetalles.Costo</td>
                                    <td><button @onclick="@(() => RemoverDetalle(trabajoDetalles))" class="btn btn-outline-danger" type="button"><i class="oi oi-trash">Eliminar</i></button></td>
                                </tr>
                            }
                        </tbody>

                    </table>

                </div>
            </fieldset>

        </div>

        <div class="card-footer bg-light d-flex justify-content-center mt-3">
            <div class="btn-group">
                <button type="button" class="btn btn-outline-primary ml-2" @onclick="Nuevo"><span class="bi bi-plus"></span> Nuevo </button>
                <button type="submit" class="btn btn-outline-success ml-2"><span class="bi bi-check-circle-fill"></span> Guardar </button>
                <a type="button" href="/Index" class="btn btn-outline-danger"><span class="bi bi-arrow-bar-left"></span> Retroceder </a>
            </div>
        </div>
    </div>
</EditForm>

@code {
    [Parameter]
    public int ComboId { get; set; }
    public RegistroCombo combo { get; set; } = new RegistroCombo();
    private bool Existe = false;
    public int articuloSeleccionado { get; set; }
    public RegistroComboDetalle combosDetalle { get; set; } = new RegistroComboDetalle();
    public List<RegistroComboDetalle> Lista_CombosDetalle { get; set; } = new List<RegistroComboDetalle>();
    public List<Articulos> Lista_Articulos { get; set; } = new List<Articulos>();


    protected override async Task OnInitializedAsync()
    {
        Lista_CombosDetalle = await registroComboService.ListarComboDetalle(ComboId);
        Lista_Articulos = await registroComboService.GetArticulos();


        combo.ComboId = ComboId;
        await Buscar();

    }

    public async Task Buscar()
    {
        Existe = false;
        var CotizacionE = await registroComboService.Buscar(combo.ComboId);

        if (CotizacionE != null)
        {
            combo = CotizacionE;
        }
        else
        {
            Nuevo();
        }
    }

    public void Nuevo()
    {
        combo = new RegistroCombo();
        Existe = false;
    }

    public async Task Guardar()
    {
        combo.registroComboDetalle = Lista_CombosDetalle;
        var guardo = await registroComboService.Guardar(combo);
        if (guardo)
        {
            Nuevo();
        }
        notifications.Notify(new(ToastType.Success, "Se guardaron los cambios satisfactoriamente "));
    }

    public async Task Eliminar()
    {
        var eliminado = await registroComboService.Eliminar(combo.ComboId);
        Nuevo();
    }


    public void AgregarDetalle()
    {
        var seleccionArticulo = Lista_Articulos
        .FirstOrDefault(a => a.ArticuloId == articuloSeleccionado);

        if (seleccionArticulo != null && combosDetalle.Cantidad > 0)
        {
            combosDetalle.Costo = seleccionArticulo.Precio;

            var detalleNuevo = new RegistroComboDetalle
                {
                    ArticuloId = seleccionArticulo.ArticuloId,
                    Cantidad = combosDetalle.Cantidad,
                    Costo = seleccionArticulo.Costo
                };


            detalleNuevo.ComboId = combo.ComboId;
            Lista_CombosDetalle.Add(detalleNuevo);
            combosDetalle = new RegistroComboDetalle();
            articuloSeleccionado = 0;
        }

    }

    public async Task RemoverDetalle(RegistroComboDetalle detalleRemover)
    {


        var detalleEliminado = await registroComboService.EliminarDetalle(detalleRemover.DetalleId);

        Lista_CombosDetalle.Remove(detalleRemover);



        articuloSeleccionado = detalleRemover.ArticuloId;
        combosDetalle.Cantidad = detalleRemover.Cantidad;
        combosDetalle.Costo = detalleRemover.Costo;
    }

}
